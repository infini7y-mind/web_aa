<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hi, I&#39;m Andre</title>
    <link>/</link>
    <description>Recent content on Hi, I&#39;m Andre</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 11 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>/posts/2014/09/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/2014/09/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/posts/2014/03/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/2014/03/migrate-to-hugo-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Chords</title>
      <link>/posts/2025/03/chords/</link>
      <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/2025/03/chords/</guid>
      <description>Chords about musics in the church
Played in church Pai nosso - rendering of &amp;ldquo;our father&amp;rdquo;
Practiced Só a ti Teu nome é santo
Played for fun Eu te vejo em tudo</description>
    </item>
    
    <item>
      <title>Music @ Church</title>
      <link>/music/church-music/</link>
      <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>/music/church-music/</guid>
      <description>Here are some of the musics I already played in the church context
  </description>
    </item>
    
    <item>
      <title>Our Father</title>
      <link>/posts/2025/03/our-father/</link>
      <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/2025/03/our-father/</guid>
      <description>Guitar Capo #
C G our father, in heaven Am Em hollowed be your name </description>
    </item>
    
    <item>
      <title>Static website with wordpress? No thanks!</title>
      <link>/thinking/static-website/</link>
      <pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/thinking/static-website/</guid>
      <description>I had a fancy shmancy website with wordpress, and I was very proud! Nice pentest tooling logos, badges for showing off, great header image. But besides terrible loading times, 3 hours to set up a 2min reading time blog post or hard time customizing css&amp;hellip; none of that really showed what I was actually learning or even who I really became after entering the cybersec world.
 Then, in a video of my brother  David  , I remembered that his guest Graham Helton (great guy) had a  great website  !</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
  https://github.com/russross/blackfriday    https://github.com/alecthomas/chroma    https://github.com/muesli/smartcrop    https://github.com/spf13/cobra    https://github.com/spf13/viper    Learn more and contribute on  GitHub  .</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/posts/2014/04/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/2014/04/hugo-template-primer/</guid>
      <description>Hugo uses the excellent  Go    html/template   library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/posts/2014/04/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/2014/04/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Go to  Hugo releases   and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at  Install Hugo  
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.</description>
    </item>
    
  </channel>
</rss>
